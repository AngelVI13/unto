(* DO NOT EDIT MANUALLY *)
(*  *)
(* generated by sqlgg <unknown> on 2025-07-26T19:09Z *)

module DbOps (T : Sqlgg_traits.M) = struct

  module IO = Sqlgg_io.Blocking

  let create_athletes db  =
    T.execute db ("CREATE TABLE IF NOT EXISTS athletes (\n\
    id INTEGER PRIMARY KEY,\n\
    firstname TEXT NOT NULL,\n\
    lastname TEXT NOT NULL,\n\
    city TEXT NOT NULL,\n\
    state TEXT NOT NULL,\n\
    country TEXT NOT NULL,\n\
    sex TEXT NOT NULL,\n\
    created_at TEXT NOT NULL,\n\
    weight FLOAT NOT NULL\n\
)") T.no_params

  let list_athletes db  callback =
    let invoke_callback stmt =
      callback
        ~id:(T.get_column_Int stmt 0)
        ~firstname:(T.get_column_Text stmt 1)
        ~lastname:(T.get_column_Text stmt 2)
        ~city:(T.get_column_Text stmt 3)
        ~state:(T.get_column_Text stmt 4)
        ~country:(T.get_column_Text stmt 5)
        ~sex:(T.get_column_Text stmt 6)
        ~created_at:(T.get_column_Text stmt 7)
        ~weight:(T.get_column_Float stmt 8)
    in
    T.select db ("SELECT * FROM athletes\n\
ORDER BY id") T.no_params invoke_callback

  let create_stats db  =
    T.execute db ("CREATE TABLE IF NOT EXISTS stats (\n\
    id INTEGER PRIMARY KEY AUTOINCREMENT,\n\
    activity_id INTEGER PRIMARY KEY,\n\
    FOREIGN KEY (activity_id) REFERENCES activities (id),\n\
    data_points INTEGER NOT NULL,\n\
    moving_time INTEGER NOT NULL,\n\
    elapsed_time INTEGER NOT NULL,\n\
    distance REAL,               elev_gain INTEGER,           elev_loss INTEGER,           elev_high INTEGER,           elev_low INTEGER,            start_lat REAL,              start_lng REAL,              end_lat REAL,                end_lng REAL,                average_speed REAL,          max_speed REAL,              average_cadence INTEGER,     max_cadence INTEGER,         average_temp INTEGER,        average_heartrate INTEGER,     max_heartrate INTEGER,         average_power INTEGER,         max_power INTEGER          )") T.no_params

  let create_activities db  =
    T.execute db ("CREATE TABLE IF NOT EXISTS activities (\n\
    id INTEGER PRIMARY KEY,\n\
    athlete_id INTEGER,\n\
    name TEXT NOT NULL,\n\
    sport_type TEXT NOT NULL,\n\
    start_date TEXT NOT NULL,\n\
    timezone TEXT NOT NULL,\n\
    map_id TEXT NOT NULL,\n\
    map_summary_polyline TEXT NOT NULL,\n\
    stats_id INTEGER NOT NULL,\n\
    FOREIGN KEY (athlete_id) REFERENCES athletes (id) ON DELETE CASCADE,\n\
    FOREIGN KEY (stats_id) REFERENCES stats (id) ON DELETE CASCADE\n\
)") T.no_params

  let create_laps db  =
    T.execute db ("CREATE TABLE IF NOT EXISTS laps (\n\
    id INTEGER PRIMARY KEY AUTOINCREMENT,\n\
    activity_id INTEGER NOT NULL,\n\
    lap_index INTEGER NOT NULL,\n\
    moving_time INTEGER NOT NULL,\n\
    start INTEGER NOT NULL,\n\
    len INTEGER NOT NULL,\n\
    stats_id INTEGER NOT NULL,\n\
    FOREIGN KEY (activity_id) REFERENCES activities (id) ON DELETE CASCADE,\n\
    FOREIGN KEY (stats_id) REFERENCES stats (id) ON DELETE CASCADE\n\
)") T.no_params

  let create_splits db  =
    T.execute db ("CREATE TABLE IF NOT EXISTS splits (\n\
    id INTEGER PRIMARY KEY AUTOINCREMENT,\n\
    activity_id INTEGER NOT NULL,\n\
    split_index INTEGER NOT NULL,\n\
    start INTEGER NOT NULL,\n\
    len INTEGER NOT NULL,\n\
    stats_id INTEGER NOT NULL,\n\
    FOREIGN KEY (activity_id) REFERENCES activities (id) ON DELETE CASCADE,\n\
    FOREIGN KEY (stats_id) REFERENCES stats (id) ON DELETE CASCADE\n\
)") T.no_params

  module Fold = struct
    let list_athletes db  callback acc =
      let invoke_callback stmt =
        callback
          ~id:(T.get_column_Int stmt 0)
          ~firstname:(T.get_column_Text stmt 1)
          ~lastname:(T.get_column_Text stmt 2)
          ~city:(T.get_column_Text stmt 3)
          ~state:(T.get_column_Text stmt 4)
          ~country:(T.get_column_Text stmt 5)
          ~sex:(T.get_column_Text stmt 6)
          ~created_at:(T.get_column_Text stmt 7)
          ~weight:(T.get_column_Float stmt 8)
      in
      let r_acc = ref acc in
      IO.(>>=) (T.select db ("SELECT * FROM athletes\n\
ORDER BY id") T.no_params (fun x -> r_acc := invoke_callback x !r_acc))
      (fun () -> IO.return !r_acc)

  end (* module Fold *)
  
  module List = struct
    let list_athletes db  callback =
      let invoke_callback stmt =
        callback
          ~id:(T.get_column_Int stmt 0)
          ~firstname:(T.get_column_Text stmt 1)
          ~lastname:(T.get_column_Text stmt 2)
          ~city:(T.get_column_Text stmt 3)
          ~state:(T.get_column_Text stmt 4)
          ~country:(T.get_column_Text stmt 5)
          ~sex:(T.get_column_Text stmt 6)
          ~created_at:(T.get_column_Text stmt 7)
          ~weight:(T.get_column_Float stmt 8)
      in
      let r_acc = ref [] in
      IO.(>>=) (T.select db ("SELECT * FROM athletes\n\
ORDER BY id") T.no_params (fun x -> r_acc := invoke_callback x :: !r_acc))
      (fun () -> IO.return (List.rev !r_acc))

  end (* module List *)
end (* module DbOps *)
